/**
 * SISTEMA DE BOAS-VINDAS - SERVIDOR BACKEND
 * =========================================
 * Servidor Express.js que gerencia o envio de emails de boas-vindas
 * Tecnologias: Node.js, Express, Resend, CORS, dotenv
 * Autor: Sistema de Boas-Vindas
 * Data: 18 de agosto de 2025
 */

// ========================================
// 1. IMPORTA√á√ÉO DE DEPEND√äNCIAS
// ========================================
const express = require('express');        // Framework web para Node.js
const cors = require('cors');              // Middleware para permitir requisi√ß√µes de diferentes origens
const path = require('path');              // Utilit√°rio para trabalhar com caminhos de arquivos
const { Resend } = require('resend');      // Servi√ßo de envio de emails
const mensagem = require('./mensagem');    // Importa templates de email do arquivo local
require('dotenv').config();                // Carrega vari√°veis de ambiente do arquivo .env

// ========================================
// 2. CONFIGURA√á√ÉO INICIAL DO SERVIDOR
// ========================================
const app = express();                             // Cria inst√¢ncia do aplicativo Express
const PORT = process.env.PORT || 3000;             // Define porta (vari√°vel de ambiente ou 3000 padr√£o)

// ========================================
// 3. CONFIGURA√á√ÉO DO SERVI√áO DE EMAIL
// ========================================
// Inicializa o Resend com a chave da API vinda das vari√°veis de ambiente
const resend = new Resend(process.env.RESEND_API_KEY);

// ========================================
// 4. CONFIGURA√á√ÉO DE MIDDLEWARES
// ========================================
// Middlewares s√£o fun√ß√µes que processam requisi√ß√µes antes de chegarem √†s rotas
app.use(cors());                                    // Permite requisi√ß√µes de qualquer origem (CORS)
app.use(express.json());                            // Interpreta corpo de requisi√ß√µes como JSON
app.use(express.urlencoded({ extended: true }));    // Interpreta dados de formul√°rios HTML

// ========================================
// 5. SERVIR ARQUIVOS EST√ÅTICOS
// ========================================
// Configura o Express para servir arquivos da pasta 'public' (HTML, CSS, JS, imagens)
app.use(express.static('public'));

// ========================================
// 6. ROTA PRINCIPAL - P√ÅGINA INICIAL
// ========================================
/**
 * GET / - Serve a p√°gina inicial do sistema
 * Retorna o arquivo HTML principal que cont√©m o formul√°rio
 */
app.get('/', (req, res) => {
    // Envia o arquivo index.html da pasta public
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// ========================================
// 7. ROTA PRINCIPAL - ENVIO DE BOAS-VINDAS
// ========================================
/**
 * POST /send-welcome - Processa o envio de emails de boas-vindas
 * Recebe: { nome: string, email: string }
 * Retorna: { sucesso: boolean, mensagem: string, emailId?: string }
 */
app.post('/send-welcome', async (req, res) => {
    try {
        // ========================================
        // 7.1 EXTRA√á√ÉO DOS DADOS DA REQUISI√á√ÉO
        // ========================================
        // Desestrutura√ß√£o para extrair nome e email do corpo da requisi√ß√£o
        const { nome, email } = req.body;

        // ========================================
        // 7.2 VALIDA√á√ïES DE ENTRADA
        // ========================================
        // Verifica se ambos os campos foram preenchidos
        if (!nome || !email) {
            return res.status(400).json({
                sucesso: false,
                mensagem: 'Nome e email s√£o obrigat√≥rios'
            });
        }

        // Valida√ß√£o do formato do email usando express√£o regular
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            return res.status(400).json({
                sucesso: false,
                mensagem: 'Formato de email inv√°lido'
            });
        }

        // Valida√ß√£o do comprimento m√≠nimo do nome (sem espa√ßos extras)
        if (nome.trim().length < 2) {
            return res.status(400).json({
                sucesso: false,
                mensagem: 'Nome deve ter pelo menos 2 caracteres'
            });
        }

        // Log para acompanhamento do processo
        console.log(`üìß Enviando boas-vindas para: ${nome} (${email})`);

        // ========================================
        // 7.3 PERSONALIZA√á√ÉO DO TEMPLATE
        // ========================================
        // Importa o template base e substitui a vari√°vel {{nome}} pelo nome real
        const assunto = mensagem.assunto;
        const textoPersonalizado = mensagem.texto.replace(/{{nome}}/g, nome.trim());
        const htmlPersonalizado = mensagem.html.replace(/{{nome}}/g, nome.trim());

        // ========================================
        // 7.4 ENVIO DO EMAIL VIA RESEND
        // ========================================
        // Chama a API do Resend para enviar o email
        const { data, error } = await resend.emails.send({
            from: process.env.FROM_EMAIL,        // Remetente (configurado no .env)
            to: [email.trim()],                  // Destinat√°rio (remove espa√ßos extras)
            subject: assunto,                    // Assunto do email
            text: textoPersonalizado,            // Vers√£o em texto simples
            html: htmlPersonalizado              // Vers√£o em HTML
        });

        // Verificar se houve erro no envio
        if (error) {
            console.error('‚ùå Erro ao enviar email:', error);
            throw new Error(`Falha no envio: ${error.message}`);
        }

        // Log de sucesso com ID do email
        console.log(`‚úÖ Email enviado com sucesso! ID: ${data.id}`);

        // ========================================
        // 7.5 RESPOSTA DE SUCESSO
        // ========================================
        res.json({
            sucesso: true,
            mensagem: `Boas-vindas enviadas para ${nome}! Verifique seu email.`,
            emailId: data.id    // ID do email para rastreamento
        });

    } catch (error) {
        // ========================================
        // 7.6 TRATAMENTO DE ERROS
        // ========================================
        // Captura qualquer erro n√£o tratado e retorna resposta de erro
        console.error('‚ùå Erro no servidor:', error);
        res.status(500).json({
            sucesso: false,
            mensagem: 'Erro interno do servidor ao enviar email'
        });
    }
});

// ========================================
// 8. ROTA DE STATUS DA API
// ========================================
/**
 * GET /api/status - Verifica se a API est√° funcionando
 * √ötil para monitoramento e health checks
 * Retorna: { status: string, mensagem: string, timestamp: string }
 */
app.get('/api/status', (req, res) => {
    res.json({
        status: 'online',                           // Status do sistema
        mensagem: 'Sistema de Boas-Vindas funcionando!',  // Mensagem informativa
        timestamp: new Date().toISOString()         // Timestamp atual em formato ISO
    });
});

// ========================================
// 9. MIDDLEWARE PARA ROTAS N√ÉO ENCONTRADAS (404)
// ========================================
/**
 * Middleware que captura todas as requisi√ß√µes para rotas que n√£o existem
 * Deve vir ap√≥s todas as rotas definidas
 */
app.use((req, res) => {
    res.status(404).json({
        sucesso: false,
        mensagem: 'Rota n√£o encontrada'
    });
});

// ========================================
// 10. MIDDLEWARE DE TRATAMENTO DE ERROS GLOBAIS
// ========================================
/**
 * Middleware para capturar erros n√£o tratados em toda a aplica√ß√£o
 * Deve ser o √∫ltimo middleware definido
 * @param {Error} error - Erro capturado
 * @param {Request} req - Objeto de requisi√ß√£o
 * @param {Response} res - Objeto de resposta  
 * @param {NextFunction} next - Fun√ß√£o para passar controle
 */
app.use((error, req, res, next) => {
    console.error('Erro n√£o tratado:', error);
    res.status(500).json({
        sucesso: false,
        mensagem: 'Erro interno do servidor'
    });
});

// ========================================
// 11. INICIALIZA√á√ÉO DO SERVIDOR
// ========================================
/**
 * Inicia o servidor HTTP na porta especificada
 * Exibe informa√ß√µes importantes sobre o sistema
 */
app.listen(PORT, () => {
    console.log(`
üöÄ Servidor iniciado com sucesso!
üìß Sistema de Boas-Vindas
üåê Acesse: http://localhost:${PORT}
üìù Status: http://localhost:${PORT}/api/status

üí° Pronto para enviar emails de boas-vindas!
    `);
});

// ========================================
// 12. EXPORTA√á√ÉO DO M√ìDULO
// ========================================
/**
 * Exporta a inst√¢ncia do app para permitir testes e reutiliza√ß√£o
 * √ötil para testes unit√°rios e integra√ß√£o com outros m√≥dulos
 */
module.exports = app;

// ========================================
// FIM DO ARQUIVO - RESUMO DAS FUNCIONALIDADES
// ========================================
/**
 * FUNCIONALIDADES IMPLEMENTADAS:
 * 
 * ‚úÖ Servidor Express configurado
 * ‚úÖ Middleware de CORS, JSON e URL-encoded
 * ‚úÖ Servir arquivos est√°ticos (frontend)
 * ‚úÖ Rota GET / (p√°gina principal)
 * ‚úÖ Rota POST /send-welcome (envio de emails)
 * ‚úÖ Rota GET /api/status (health check)
 * ‚úÖ Valida√ß√£o de dados de entrada
 * ‚úÖ Integra√ß√£o com Resend para envio de emails
 * ‚úÖ Sistema de templates com substitui√ß√£o de vari√°veis
 * ‚úÖ Tratamento completo de erros
 * ‚úÖ Middleware para rotas 404
 * ‚úÖ Logs informativos e de erro
 * ‚úÖ Configura√ß√£o via vari√°veis de ambiente
 * 
 * FLUXO PRINCIPAL:
 * Frontend ‚Üí POST /send-welcome ‚Üí Valida√ß√£o ‚Üí Template ‚Üí Resend ‚Üí Resposta
 * 
 * DEPEND√äNCIAS EXTERNAS:
 * - Resend API (para envio de emails)
 * - Arquivo .env (para configura√ß√µes)
 * - Arquivo mensagem.js (para templates)
 */
